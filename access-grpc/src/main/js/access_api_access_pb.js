/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var access_api_auth_pb = require('./access_api_auth_pb.js');
goog.exportSymbol('proto.amv_access_api.AccessCertificate', null, global);
goog.exportSymbol('proto.amv_access_api.AccessCertificateSigningRequest', null, global);
goog.exportSymbol('proto.amv_access_api.CreateAccessCertificateRequest', null, global);
goog.exportSymbol('proto.amv_access_api.CreateAccessCertificateResponse', null, global);
goog.exportSymbol('proto.amv_access_api.GetAccessCertificatesRequest', null, global);
goog.exportSymbol('proto.amv_access_api.GetAccessCertificatesResponse', null, global);
goog.exportSymbol('proto.amv_access_api.SignAccessCertificateRequest', null, global);
goog.exportSymbol('proto.amv_access_api.SignAccessCertificateResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.amv_access_api.AccessCertificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.amv_access_api.AccessCertificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.amv_access_api.AccessCertificate.displayName = 'proto.amv_access_api.AccessCertificate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.amv_access_api.AccessCertificate.prototype.toObject = function(opt_includeInstance) {
  return proto.amv_access_api.AccessCertificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.amv_access_api.AccessCertificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.AccessCertificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceAccessCertificate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vehicleAccessCertificate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.amv_access_api.AccessCertificate}
 */
proto.amv_access_api.AccessCertificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.amv_access_api.AccessCertificate;
  return proto.amv_access_api.AccessCertificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.amv_access_api.AccessCertificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.amv_access_api.AccessCertificate}
 */
proto.amv_access_api.AccessCertificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAccessCertificate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicleAccessCertificate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.amv_access_api.AccessCertificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.amv_access_api.AccessCertificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.amv_access_api.AccessCertificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.AccessCertificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceAccessCertificate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVehicleAccessCertificate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.amv_access_api.AccessCertificate.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.amv_access_api.AccessCertificate.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_access_certificate = 2;
 * @return {string}
 */
proto.amv_access_api.AccessCertificate.prototype.getDeviceAccessCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.amv_access_api.AccessCertificate.prototype.setDeviceAccessCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string vehicle_access_certificate = 3;
 * @return {string}
 */
proto.amv_access_api.AccessCertificate.prototype.getVehicleAccessCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.amv_access_api.AccessCertificate.prototype.setVehicleAccessCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.amv_access_api.AccessCertificate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.amv_access_api.AccessCertificate.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 version = 5;
 * @return {number}
 */
proto.amv_access_api.AccessCertificate.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.amv_access_api.AccessCertificate.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.amv_access_api.GetAccessCertificatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.amv_access_api.GetAccessCertificatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.amv_access_api.GetAccessCertificatesRequest.displayName = 'proto.amv_access_api.GetAccessCertificatesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.amv_access_api.GetAccessCertificatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.amv_access_api.GetAccessCertificatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.amv_access_api.GetAccessCertificatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.GetAccessCertificatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceAuth: (f = msg.getDeviceAuth()) && access_api_auth_pb.DeviceAuth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.amv_access_api.GetAccessCertificatesRequest}
 */
proto.amv_access_api.GetAccessCertificatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.amv_access_api.GetAccessCertificatesRequest;
  return proto.amv_access_api.GetAccessCertificatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.amv_access_api.GetAccessCertificatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.amv_access_api.GetAccessCertificatesRequest}
 */
proto.amv_access_api.GetAccessCertificatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new access_api_auth_pb.DeviceAuth;
      reader.readMessage(value,access_api_auth_pb.DeviceAuth.deserializeBinaryFromReader);
      msg.setDeviceAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.amv_access_api.GetAccessCertificatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.amv_access_api.GetAccessCertificatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.amv_access_api.GetAccessCertificatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.GetAccessCertificatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      access_api_auth_pb.DeviceAuth.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeviceAuth device_auth = 1;
 * @return {?proto.amv_access_api.DeviceAuth}
 */
proto.amv_access_api.GetAccessCertificatesRequest.prototype.getDeviceAuth = function() {
  return /** @type{?proto.amv_access_api.DeviceAuth} */ (
    jspb.Message.getWrapperField(this, access_api_auth_pb.DeviceAuth, 1));
};


/** @param {?proto.amv_access_api.DeviceAuth|undefined} value */
proto.amv_access_api.GetAccessCertificatesRequest.prototype.setDeviceAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.amv_access_api.GetAccessCertificatesRequest.prototype.clearDeviceAuth = function() {
  this.setDeviceAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.amv_access_api.GetAccessCertificatesRequest.prototype.hasDeviceAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.amv_access_api.GetAccessCertificatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.amv_access_api.GetAccessCertificatesResponse.repeatedFields_, null);
};
goog.inherits(proto.amv_access_api.GetAccessCertificatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.amv_access_api.GetAccessCertificatesResponse.displayName = 'proto.amv_access_api.GetAccessCertificatesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.amv_access_api.GetAccessCertificatesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.amv_access_api.GetAccessCertificatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.amv_access_api.GetAccessCertificatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.amv_access_api.GetAccessCertificatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.GetAccessCertificatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessCertificatesList: jspb.Message.toObjectList(msg.getAccessCertificatesList(),
    proto.amv_access_api.AccessCertificate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.amv_access_api.GetAccessCertificatesResponse}
 */
proto.amv_access_api.GetAccessCertificatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.amv_access_api.GetAccessCertificatesResponse;
  return proto.amv_access_api.GetAccessCertificatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.amv_access_api.GetAccessCertificatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.amv_access_api.GetAccessCertificatesResponse}
 */
proto.amv_access_api.GetAccessCertificatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.amv_access_api.AccessCertificate;
      reader.readMessage(value,proto.amv_access_api.AccessCertificate.deserializeBinaryFromReader);
      msg.addAccessCertificates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.amv_access_api.GetAccessCertificatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.amv_access_api.GetAccessCertificatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.amv_access_api.GetAccessCertificatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.GetAccessCertificatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessCertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.amv_access_api.AccessCertificate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccessCertificate access_certificates = 1;
 * @return {!Array.<!proto.amv_access_api.AccessCertificate>}
 */
proto.amv_access_api.GetAccessCertificatesResponse.prototype.getAccessCertificatesList = function() {
  return /** @type{!Array.<!proto.amv_access_api.AccessCertificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.amv_access_api.AccessCertificate, 1));
};


/** @param {!Array.<!proto.amv_access_api.AccessCertificate>} value */
proto.amv_access_api.GetAccessCertificatesResponse.prototype.setAccessCertificatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.amv_access_api.AccessCertificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.amv_access_api.AccessCertificate}
 */
proto.amv_access_api.GetAccessCertificatesResponse.prototype.addAccessCertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.amv_access_api.AccessCertificate, opt_index);
};


proto.amv_access_api.GetAccessCertificatesResponse.prototype.clearAccessCertificatesList = function() {
  this.setAccessCertificatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.amv_access_api.CreateAccessCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.amv_access_api.CreateAccessCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.amv_access_api.CreateAccessCertificateRequest.displayName = 'proto.amv_access_api.CreateAccessCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.amv_access_api.CreateAccessCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.amv_access_api.CreateAccessCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.CreateAccessCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuerAuth: (f = msg.getIssuerAuth()) && access_api_auth_pb.IssuerAuth.toObject(includeInstance, f),
    appId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceSerialNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    vehicleSerialNumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    validityStart: jspb.Message.getFieldWithDefault(msg, 5, 0),
    validityEnd: jspb.Message.getFieldWithDefault(msg, 6, 0),
    version: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.amv_access_api.CreateAccessCertificateRequest}
 */
proto.amv_access_api.CreateAccessCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.amv_access_api.CreateAccessCertificateRequest;
  return proto.amv_access_api.CreateAccessCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.amv_access_api.CreateAccessCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.amv_access_api.CreateAccessCertificateRequest}
 */
proto.amv_access_api.CreateAccessCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new access_api_auth_pb.IssuerAuth;
      reader.readMessage(value,access_api_auth_pb.IssuerAuth.deserializeBinaryFromReader);
      msg.setIssuerAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceSerialNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicleSerialNumber(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidityStart(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidityEnd(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.amv_access_api.CreateAccessCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.amv_access_api.CreateAccessCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.CreateAccessCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuerAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      access_api_auth_pb.IssuerAuth.serializeBinaryToWriter
    );
  }
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceSerialNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVehicleSerialNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getValidityStart();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getValidityEnd();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional IssuerAuth issuer_auth = 1;
 * @return {?proto.amv_access_api.IssuerAuth}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.getIssuerAuth = function() {
  return /** @type{?proto.amv_access_api.IssuerAuth} */ (
    jspb.Message.getWrapperField(this, access_api_auth_pb.IssuerAuth, 1));
};


/** @param {?proto.amv_access_api.IssuerAuth|undefined} value */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.setIssuerAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.amv_access_api.CreateAccessCertificateRequest.prototype.clearIssuerAuth = function() {
  this.setIssuerAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.hasIssuerAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string app_id = 2;
 * @return {string}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.setAppId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_serial_number = 3;
 * @return {string}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.getDeviceSerialNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.setDeviceSerialNumber = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string vehicle_serial_number = 4;
 * @return {string}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.getVehicleSerialNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.setVehicleSerialNumber = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 validity_start = 5;
 * @return {number}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.getValidityStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.setValidityStart = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 validity_end = 6;
 * @return {number}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.getValidityEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.setValidityEnd = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 version = 7;
 * @return {number}
 */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.amv_access_api.CreateAccessCertificateRequest.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.amv_access_api.CreateAccessCertificateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.amv_access_api.CreateAccessCertificateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.amv_access_api.CreateAccessCertificateResponse.displayName = 'proto.amv_access_api.CreateAccessCertificateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.amv_access_api.CreateAccessCertificateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.amv_access_api.CreateAccessCertificateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.amv_access_api.CreateAccessCertificateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.CreateAccessCertificateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessCertificateSigningRequest: (f = msg.getAccessCertificateSigningRequest()) && proto.amv_access_api.AccessCertificateSigningRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.amv_access_api.CreateAccessCertificateResponse}
 */
proto.amv_access_api.CreateAccessCertificateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.amv_access_api.CreateAccessCertificateResponse;
  return proto.amv_access_api.CreateAccessCertificateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.amv_access_api.CreateAccessCertificateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.amv_access_api.CreateAccessCertificateResponse}
 */
proto.amv_access_api.CreateAccessCertificateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.amv_access_api.AccessCertificateSigningRequest;
      reader.readMessage(value,proto.amv_access_api.AccessCertificateSigningRequest.deserializeBinaryFromReader);
      msg.setAccessCertificateSigningRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.amv_access_api.CreateAccessCertificateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.amv_access_api.CreateAccessCertificateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.amv_access_api.CreateAccessCertificateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.CreateAccessCertificateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessCertificateSigningRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.amv_access_api.AccessCertificateSigningRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccessCertificateSigningRequest access_certificate_signing_request = 1;
 * @return {?proto.amv_access_api.AccessCertificateSigningRequest}
 */
proto.amv_access_api.CreateAccessCertificateResponse.prototype.getAccessCertificateSigningRequest = function() {
  return /** @type{?proto.amv_access_api.AccessCertificateSigningRequest} */ (
    jspb.Message.getWrapperField(this, proto.amv_access_api.AccessCertificateSigningRequest, 1));
};


/** @param {?proto.amv_access_api.AccessCertificateSigningRequest|undefined} value */
proto.amv_access_api.CreateAccessCertificateResponse.prototype.setAccessCertificateSigningRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.amv_access_api.CreateAccessCertificateResponse.prototype.clearAccessCertificateSigningRequest = function() {
  this.setAccessCertificateSigningRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.amv_access_api.CreateAccessCertificateResponse.prototype.hasAccessCertificateSigningRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.amv_access_api.AccessCertificateSigningRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.amv_access_api.AccessCertificateSigningRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.amv_access_api.AccessCertificateSigningRequest.displayName = 'proto.amv_access_api.AccessCertificateSigningRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.amv_access_api.AccessCertificateSigningRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.amv_access_api.AccessCertificateSigningRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.amv_access_api.AccessCertificateSigningRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.AccessCertificateSigningRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceAccessCertificate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vehicleAccessCertificate: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.amv_access_api.AccessCertificateSigningRequest}
 */
proto.amv_access_api.AccessCertificateSigningRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.amv_access_api.AccessCertificateSigningRequest;
  return proto.amv_access_api.AccessCertificateSigningRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.amv_access_api.AccessCertificateSigningRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.amv_access_api.AccessCertificateSigningRequest}
 */
proto.amv_access_api.AccessCertificateSigningRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAccessCertificate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicleAccessCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.amv_access_api.AccessCertificateSigningRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.amv_access_api.AccessCertificateSigningRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.amv_access_api.AccessCertificateSigningRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.AccessCertificateSigningRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceAccessCertificate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVehicleAccessCertificate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.amv_access_api.AccessCertificateSigningRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.amv_access_api.AccessCertificateSigningRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_access_certificate = 2;
 * @return {string}
 */
proto.amv_access_api.AccessCertificateSigningRequest.prototype.getDeviceAccessCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.amv_access_api.AccessCertificateSigningRequest.prototype.setDeviceAccessCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string vehicle_access_certificate = 3;
 * @return {string}
 */
proto.amv_access_api.AccessCertificateSigningRequest.prototype.getVehicleAccessCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.amv_access_api.AccessCertificateSigningRequest.prototype.setVehicleAccessCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.amv_access_api.SignAccessCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.amv_access_api.SignAccessCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.amv_access_api.SignAccessCertificateRequest.displayName = 'proto.amv_access_api.SignAccessCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.amv_access_api.SignAccessCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.amv_access_api.SignAccessCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.SignAccessCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuerAuth: (f = msg.getIssuerAuth()) && access_api_auth_pb.IssuerAuth.toObject(includeInstance, f),
    accessCertificateId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vehicleAccessCertificateSignatureBase64: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signedVehicleAccessCertificateBase64: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deviceAccessCertificateSignatureBase64: jspb.Message.getFieldWithDefault(msg, 5, ""),
    signedDeviceAccessCertificateBase64: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.amv_access_api.SignAccessCertificateRequest}
 */
proto.amv_access_api.SignAccessCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.amv_access_api.SignAccessCertificateRequest;
  return proto.amv_access_api.SignAccessCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.amv_access_api.SignAccessCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.amv_access_api.SignAccessCertificateRequest}
 */
proto.amv_access_api.SignAccessCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new access_api_auth_pb.IssuerAuth;
      reader.readMessage(value,access_api_auth_pb.IssuerAuth.deserializeBinaryFromReader);
      msg.setIssuerAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessCertificateId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicleAccessCertificateSignatureBase64(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignedVehicleAccessCertificateBase64(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAccessCertificateSignatureBase64(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignedDeviceAccessCertificateBase64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.amv_access_api.SignAccessCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.amv_access_api.SignAccessCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.SignAccessCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuerAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      access_api_auth_pb.IssuerAuth.serializeBinaryToWriter
    );
  }
  f = message.getAccessCertificateId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVehicleAccessCertificateSignatureBase64();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSignedVehicleAccessCertificateBase64();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeviceAccessCertificateSignatureBase64();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSignedDeviceAccessCertificateBase64();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional IssuerAuth issuer_auth = 1;
 * @return {?proto.amv_access_api.IssuerAuth}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.getIssuerAuth = function() {
  return /** @type{?proto.amv_access_api.IssuerAuth} */ (
    jspb.Message.getWrapperField(this, access_api_auth_pb.IssuerAuth, 1));
};


/** @param {?proto.amv_access_api.IssuerAuth|undefined} value */
proto.amv_access_api.SignAccessCertificateRequest.prototype.setIssuerAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.amv_access_api.SignAccessCertificateRequest.prototype.clearIssuerAuth = function() {
  this.setIssuerAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.hasIssuerAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string access_certificate_id = 2;
 * @return {string}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.getAccessCertificateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.amv_access_api.SignAccessCertificateRequest.prototype.setAccessCertificateId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string vehicle_access_certificate_signature_base64 = 3;
 * @return {string}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.getVehicleAccessCertificateSignatureBase64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.amv_access_api.SignAccessCertificateRequest.prototype.setVehicleAccessCertificateSignatureBase64 = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string signed_vehicle_access_certificate_base64 = 4;
 * @return {string}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.getSignedVehicleAccessCertificateBase64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.amv_access_api.SignAccessCertificateRequest.prototype.setSignedVehicleAccessCertificateBase64 = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string device_access_certificate_signature_base64 = 5;
 * @return {string}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.getDeviceAccessCertificateSignatureBase64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.amv_access_api.SignAccessCertificateRequest.prototype.setDeviceAccessCertificateSignatureBase64 = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string signed_device_access_certificate_base64 = 6;
 * @return {string}
 */
proto.amv_access_api.SignAccessCertificateRequest.prototype.getSignedDeviceAccessCertificateBase64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.amv_access_api.SignAccessCertificateRequest.prototype.setSignedDeviceAccessCertificateBase64 = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.amv_access_api.SignAccessCertificateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.amv_access_api.SignAccessCertificateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.amv_access_api.SignAccessCertificateResponse.displayName = 'proto.amv_access_api.SignAccessCertificateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.amv_access_api.SignAccessCertificateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.amv_access_api.SignAccessCertificateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.amv_access_api.SignAccessCertificateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.SignAccessCertificateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessCertificate: (f = msg.getAccessCertificate()) && proto.amv_access_api.AccessCertificate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.amv_access_api.SignAccessCertificateResponse}
 */
proto.amv_access_api.SignAccessCertificateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.amv_access_api.SignAccessCertificateResponse;
  return proto.amv_access_api.SignAccessCertificateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.amv_access_api.SignAccessCertificateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.amv_access_api.SignAccessCertificateResponse}
 */
proto.amv_access_api.SignAccessCertificateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.amv_access_api.AccessCertificate;
      reader.readMessage(value,proto.amv_access_api.AccessCertificate.deserializeBinaryFromReader);
      msg.setAccessCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.amv_access_api.SignAccessCertificateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.amv_access_api.SignAccessCertificateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.amv_access_api.SignAccessCertificateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.amv_access_api.SignAccessCertificateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessCertificate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.amv_access_api.AccessCertificate.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccessCertificate access_certificate = 1;
 * @return {?proto.amv_access_api.AccessCertificate}
 */
proto.amv_access_api.SignAccessCertificateResponse.prototype.getAccessCertificate = function() {
  return /** @type{?proto.amv_access_api.AccessCertificate} */ (
    jspb.Message.getWrapperField(this, proto.amv_access_api.AccessCertificate, 1));
};


/** @param {?proto.amv_access_api.AccessCertificate|undefined} value */
proto.amv_access_api.SignAccessCertificateResponse.prototype.setAccessCertificate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.amv_access_api.SignAccessCertificateResponse.prototype.clearAccessCertificate = function() {
  this.setAccessCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.amv_access_api.SignAccessCertificateResponse.prototype.hasAccessCertificate = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.amv_access_api);
